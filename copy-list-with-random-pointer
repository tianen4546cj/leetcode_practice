/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */

public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null) return null;
        RandomListNode old = head;
        RandomListNode node = new RandomListNode(old.label);
        node.next = null;
        RandomListNode newNode = node;
        while(old.next != null){
        	old = old.next;
        	RandomListNode node2 = new RandomListNode(old.label);
            node2.next = null;
        	newNode.next = node2;
            newNode = newNode.next;
        }
        
        RandomListNode old3 = head;
        RandomListNode newNode3 = node;

        while(old3 != null) {
            if (old3.random != null){
            	RandomListNode old2 = head;
           		RandomListNode newNode2 = node;
            	while(!old3.random.equals(old2)){
                	old2 = old2.next;
                	newNode2 = newNode2.next;
            	}
         	    newNode3.random = newNode2;
            } else {
            	newNode3.random = null;
            }
           
         	newNode3 = newNode3.next;
            old3 = old3.next;
        }
        
        
        return node;
    }
    
 ### 牛客上的解法：将新旧list串联在一起，即可获取random指针的位置，巧妙！！！
    public RandomListNode copyRandomList(RandomListNode head) {
    if(head == null || (head.next == null && head.random == null)){
        return head;
    }
    RandomListNode node = head;
    while(node != null){
        RandomListNode copyNode = copyOf(node);
        node.next = copyNode;
        node = node.next.next;
    }
    node = head.next;
    while(node != null){
        if(node.next != null){
            node.next = node.next.next;
        }
        if(node.random != null){
            node.random  = node.random.next;
        }
        node = node.next;
    }
 
    return head.next;
}
private RandomListNode copyOf(RandomListNode node) {
    // TODO Auto-generated method stub
    RandomListNode res = new RandomListNode(node.label);
    res.next = node.next;
    res.random = node.random;
    return res;
}
